#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'rubigen'
require 'rubigen/scripts/generate'
require File.dirname(__FILE__) + "/../lib/butterfly"

PURPLE = "\033[0;35m"
BLUE   = "\033[0;34m"
WHITE  = "\033[0;37m"


### Set up generators

# get code generators
generators = Butterfly::CodeGenerators.new

# Add all code generators to the beginning of a list of sources where we look in order.
RubiGen::Base.prepend_sources(generators.sources) 

### Parse options and arguments from command-line

# get default options:
options = Butterfly::DEFAULTS

# parse options (after parsing they are removed from ARGV)
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] #{PURPLE}<generator-group>#{WHITE} <generaor-type> <project-name>"
  opts.separator ""

  opts.on("-q", "--quiet", "Suppress status output.") do
    options[:quiet] = true
  end
  
  opts.on("-g", "--git", "Create an empty git repository.") do
    options[:git] = true
  end

  opts.on("-h", "--help", "Print generator's options and usage.") do
    puts opts
    exit
  end

  opts.on("-v", "--version", "Print version.") do
    puts "#{File.basename($0)} #{Butterfly::VERSION}"
    exit
  end

  opts.separator ""
  opts.separator "Please choose a generator-group below:"
  opts.separator ""
  generators.names.each do |name|
    opts.separator "    #{PURPLE}#{name}#{WHITE}"
  end
end
opts.parse!

# parse arguments:
# first argument is <generator-group>
if ARGV.length == 1
  generator_group = ARGV[0]
  generator_types = generators.types_of(generator_group)
  
  # check if first argument is an existing generator-group
  if generators.names.include?(generator_group)

    # show generator-types
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename($0)} [options] #{PURPLE}#{generator_group}#{WHITE} #{BLUE}<generator-type>#{WHITE} <project-name>"
      opts.separator ""
      opts.separator "Please choose a generator-type below:"
      opts.separator ""
      generator_types.each do |type|
        opts.separator "    #{BLUE}#{type}#{WHITE}"
      end
    end
    opts.parse!
  else
    raise Butterfly::GeneratorError, "generator group '#{generator_group}' does not exist." 
  end
end

# second argument is <generator-type>
if ARGV.length == 2
  generator_group = ARGV[0]
  generator_types = generators.types_of(generator_group)
  generator_type = ARGV[1]

  # check if second argument is an existing generator-type
  if generator_types.include?(generator_type)
    project_name = File.basename(Dir.pwd)
  else
    raise Butterfly::GeneratorError, "generator type '#{generator_type}' does not exist." 
  end  
end

# show help if generator-group, generator-type and project-name is missing
if ARGV.length != 3
  opts.parse(["-h"])
  exit
end

project_name = ARGV[2]




#  RubiGen::Scripts::Generate.new.run(ARGV, :generator => 'static')
#  RubiGen::Scripts::Generate.new.run(ARGV, :generator => 'sinatra', :backtrace => true)
